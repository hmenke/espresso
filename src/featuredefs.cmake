# Handle external features
set(FEATURES_EXTERNAL_KNOWN "FFTW;H5MD;CUDA;SCAFACOS")
if(FFTW EQUAL 3)
  list(APPEND FEATURES_EXTERNAL "FFTW")
endif()

if(H5MD EQUAL 1)
  list(APPEND FEATURES_EXTERNAL "H5MD")
endif()

if(CUDA EQUAL 1)
  list(APPEND FEATURES_EXTERNAL "CUDA")
endif()

if(SCAFACOS EQUAL 1)
  list(APPEND FEATURES_EXTERNAL "SCAFACOS")
endif()


# Define features
macro(DEFINE_FEATURE)
  cmake_parse_arguments(F "" "NAME" "REQUIRES;IMPLIES;CONFLICTS;EQUALS" ${ARGN} )

  list(APPEND FEATURES_KNOWN "${F_NAME}")

  set(FEATURES_${F_NAME}_REQUIRES  "${F_REQUIRES}")
  set(FEATURES_${F_NAME}_IMPLIES   "${F_IMPLIES}")
  set(FEATURES_${F_NAME}_CONFLICTS "${F_CONFLICTS}")
  set(FEATURES_${F_NAME}_EQUALS    "${F_EQUALS}")
endmacro()


macro(GENERATE_CONFIG_FEATURES)
  # Generate src/core/config-features.cpp
  file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/core/config-features.cpp "\
/*
WARNING: This file was autogenerated by CMake

   Do not modify it or your changes will be overwritten!
   Modify features.def instead.
*/

/* config.hpp includes config-features.hpp */
#include \"config.hpp\"

const char* FEATURES[] = {
")

  foreach(F_NAME ${F_DEFINED})
    file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/core/config-features.cpp "\"${F_NAME}\",\n")
  endforeach()

  file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/core/config-features.cpp "};

const int NUM_FEATURES = sizeof(FEATURES)/sizeof(char*);
")

  # Generate src/core/config-features.hpp
  file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/core/config-features.hpp "\
/*
WARNING: This file was autogenerated by CMake

   Do not modify it or your changes will be overwritten!
   Modify features.def instead.
*/
#ifndef _FEATURECONFIG_HPP
#define _FEATURECONFIG_HPP

")

  foreach(F_NAME ${F_DEFINED})
    file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/core/config-features.hpp "#define ${F_NAME}\n")
  endforeach()

  file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/core/config-features.hpp "
extern const char* FEATURES[];
extern const int NUM_FEATURES;

#endif /* of _FEATURECONFIG_HPP */
")
endmacro()


macro(GENERATE_CODE_INFO_PXI)
  # Generate src/python/espressomd/myconfig.pxi
  file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/python/espressomd/myconfig.pxi "\
# This file was autogenerated.
# Do not modify it or your changes will be overwritten!
")

  foreach(F_NAME ${FEATURES_KNOWN})
    list(FIND F_DEFINED "${F_NAME}" FEATURE_DEFINED)
    if(FEATURE_DEFINED EQUAL -1)
      file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/python/espressomd/myconfig.pxi "DEF ${F_NAME} = 0\n")
    else()
      file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/python/espressomd/myconfig.pxi "DEF ${F_NAME} = 1\n")
    endif()
  endforeach()

  # Generate src/python/espressomd/code_info.pyx
  file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/python/espressomd/code_info.pyx "\
# This file was autogenerated.
# Do not modify it or your changes will be overwritten!

include \"myconfig.pxi\"

def features():
    \"\"\"Returns list of features compiled into Espresso core\"\"\"

    f = [")

  foreach(F_NAME ${F_DEFINED})
    file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/python/espressomd/code_info.pyx "\"${F_NAME}\",")
  endforeach()

  file(APPEND ${CMAKE_CURRENT_BINARY_DIR}/python/espressomd/code_info.pyx "]

    return sorted(f)
")
endmacro()

# Handle user features
function(FEATURES)
  message(STATUS "Processing features")

  # Expand variables in if()
  cmake_policy(SET CMP0054 OLD)

  # Add detected external featuers
  list(APPEND F_DEFINED "${FEATURES_EXTERNAL}")

  # Loop over features
  foreach(F_NAME ${ARGN})
    # Check if the feature is defined
    list(FIND FEATURES_KNOWN "${F_NAME}" FEATURE_FOUND)
    if(FEATURE_FOUND EQUAL -1)
      message(FATAL_ERROR "No such feature ${F_NAME}")
    endif()

    # Check whether required external features are present
    set(EXTERNAL_SATISFIED TRUE)
    foreach(F_EXT ${FEATURES_EXTERNAL_KNOWN})
      list(FIND FEATURES_${F_NAME}_REQUIRES "${F_EXT}" FEATURE_FOUND)
      if(NOT FEATURE_FOUND EQUAL -1)
        list(FIND FEATURES_EXTERNAL "${F_EXT}" FEATURE_FOUND)
        if(FEATURE_FOUND EQUAL -1)
          message(WARNING "${F_NAME} required external feature ${F_EXT} but it is not available. Skipping!")
          set(EXTERNAL_SATISFIED FALSE)
        endif()
      endif()
    endforeach()

    if(EXTERNAL_SATISFIED)

      # Warn when derived switches are specified manually
      if(NOT "${FEATURES_${F_NAME}_EQUALS}" STREQUAL "")
        message(WARNING "${F_NAME} is a derived switch and should not be set manually!")
        list(APPEND F_DEFINED "${FEATURES_${F_NAME}_EQUALS}")
      else()
        list(APPEND F_DEFINED "${F_NAME}")
      endif()

      # Append requirements to lists
      if(NOT "${FEATURES_${F_NAME}_REQUIRES}" STREQUAL "")
        list(APPEND F_REQUIRES  "${FEATURES_${F_NAME}_REQUIRES}")
      endif()
      if(NOT "${FEATURES_${F_NAME}_IMPLIES}" STREQUAL "")
        list(APPEND F_IMPLIES   "${FEATURES_${F_NAME}_IMPLIES}")
      endif()
      if(NOT "${FEATURES_${F_NAME}_CONFLICTS}" STREQUAL "")
        list(APPEND F_CONFLICTS "${FEATURES_${F_NAME}_CONFLICTS}")
      endif()

    endif(EXTERNAL_SATISFIED)

  endforeach()

  # Remove duplicates (REMOVE_DUPLICATES does not like empty lists)
  if(NOT "${F_REQUIRES}" STREQUAL "")
    list(REMOVE_DUPLICATES F_REQUIRES)
  endif()
  if(NOT "${F_IMPLIES}" STREQUAL "")
    list(REMOVE_DUPLICATES F_IMPLIES)
  endif()
  if(NOT "${F_CONFLITS}" STREQUAL "")
    list(REMOVE_DUPLICATES F_CONFLICTS)
  endif()

  message("${F_DEFINED}\n")
  message("${F_REQUIRES}")

  # Check for conflicting features
  foreach(F_NAME ${ARGN})
    list(FIND F_CONFLICTS "${F_NAME}" FEATURE_FOUND)
    if(NOT FEATURE_FOUND EQUAL -1)
      message(FATAL_ERROR "Conflicting feature ${F_NAME}")
    endif()
  endforeach()
  message(STATUS "  No conflicts detected")

  # Check for required features
  foreach(F_NAME ${F_REQUIRES})
    list(FIND F_DEFINED "${F_NAME}" FEATURE_DEFINED)
    list(FIND F_IMPLIES "${F_NAME}" FEATURE_IMPLIED)
    if(FEATURE_DEFINED EQUAL -1 AND FEATURE_IMPLIED EQUAL -1)
      message(FATAL_ERROR "Feature ${F_NAME} required but neither defined nor implied")
    endif()
  endforeach()
  message(STATUS "  All requirements are satisfied")

  # Merge defined and implied features
  list(APPEND F_DEFINED "${F_IMPLIES}")
  list(REMOVE_DUPLICATES F_DEFINED)

  # Merge known and external features
  list(APPEND FEATURES_KNOWN "${FEATURES_EXTERNAL}")
  
  GENERATE_CONFIG_FEATURES()
  GENERATE_CODE_INFO_PXI()
endfunction()

# Generic features
DEFINE_FEATURE(NAME PARTIAL_PERIODIC)
DEFINE_FEATURE(NAME EXTERNAL_FORCES)
DEFINE_FEATURE(NAME CONSTRAINTS)
DEFINE_FEATURE(NAME MASS)
DEFINE_FEATURE(NAME EXCLUSIONS)
DEFINE_FEATURE(NAME COMFIXED)
DEFINE_FEATURE(NAME MOLFORCES)
DEFINE_FEATURE(NAME BOND_CONSTRAINT)
DEFINE_FEATURE(NAME MODES                           REQUIRES FFTW)
DEFINE_FEATURE(NAME BOND_VIRTUAL)
DEFINE_FEATURE(NAME LANGEVIN_PER_PARTICLE)
DEFINE_FEATURE(NAME COLLISION_DETECTION             IMPLIES GHOSTS_HAVE_BONDS)
DEFINE_FEATURE(NAME LEES_EDWARDS                    CONFLICTS ELECTROSTATICS LB PARTIAL_PERIODIC)
DEFINE_FEATURE(NAME METADYNAMICS)
DEFINE_FEATURE(NAME NEMD)
DEFINE_FEATURE(NAME NPT)
DEFINE_FEATURE(NAME GHMC)
DEFINE_FEATURE(NAME CATALYTIC_REACTIONS)
DEFINE_FEATURE(NAME MULTI_TIMESTEP                  CONFLICTS GAUSSRANDOMCUT GAUSSRANDOM)
DEFINE_FEATURE(NAME ENGINE                          IMPLIES ROTATION EXTERNAL_FORCES)
DEFINE_FEATURE(NAME PARTICLE_ANISOTROPY)

# Rotation
DEFINE_FEATURE(NAME ROTATION)
DEFINE_FEATURE(NAME ROTATIONAL_INERTIA              IMPLIES ROTATION)

# Electrostatics
DEFINE_FEATURE(NAME ELECTROSTATICS)
DEFINE_FEATURE(NAME P3M                             EQUALS ELECTROSTATICS FFTW)
DEFINE_FEATURE(NAME INTER_RF                        IMPLIES ELECTROSTATICS)
DEFINE_FEATURE(NAME MMM1D_GPU                       REQUIRES CUDA PARTIAL_PERIODIC ELECTROSTATICS)
DEFINE_FEATURE(NAME EWALD_GPU                       REQUIRES CUDA ELECTROSTATICS)
DEFINE_FEATURE(NAME _P3M_GPU_FLOAT                  REQUIRES CUDA ELECTROSTATICS)
DEFINE_FEATURE(NAME _P3M_GPU_DOUBLE                 REQUIRES CUDA ELECTROSTATICS)


# Magnetostatics
DEFINE_FEATURE(NAME DIPOLES)
DEFINE_FEATURE(NAME DP3M                            EQUALS DIPOLES FFTW)
DEFINE_FEATURE(NAME DIPOLAR_DIRECT_SUM              REQUIRES CUDA EQUALS DIPOLES ROTATION CUDA)

# Virtual sites features
DEFINE_FEATURE(NAME VIRTUAL_SITES_COM               CONFLICTS VIRTUAL_SITES_RELATIVE)
DEFINE_FEATURE(NAME VIRTUAL_SITES_RELATIVE          CONFLICTS VIRTUAL_SITES_COM IMPLIES ROTATION)
DEFINE_FEATURE(NAME VIRTUAL_SITES                   EQUALS VIRTUAL_SITES_COM VIRTUAL_SITES_RELATIVE IMMERSED_BOUNDARY)
DEFINE_FEATURE(NAME VIRTUAL_SITES_NO_VELOCITY       REQUIRES VIRTUAL_SITES_RELATIVE)
DEFINE_FEATURE(NAME VIRTUAL_SITES_THERMOSTAT        REQUIRES VIRTUAL_SITES_RELATIVE)
DEFINE_FEATURE(NAME THERMOSTAT_IGNORE_NON_VIRTUAL   IMPLIES VIRTUAL_SITES_THERMOSTAT)

# DPD features
DEFINE_FEATURE(NAME DPD)
DEFINE_FEATURE(NAME TUNABLE_SLIP)

# Lattice-Boltzmann features
DEFINE_FEATURE(NAME LB)
DEFINE_FEATURE(NAME LB_GPU                          REQUIRES CUDA)
DEFINE_FEATURE(NAME LB_BOUNDARIES                   IMPLIES LB CONSTRAINTS)
DEFINE_FEATURE(NAME LB_BOUNDARIES_GPU               IMPLIES LB_GPU CONSTRAINTS)
DEFINE_FEATURE(NAME LB_ELECTROHYDRODYNAMICS         IMPLIES LB)
DEFINE_FEATURE(NAME ELECTROKINETICS                 IMPLIES LB_GPU EXTERNAL_FORCES ELECTROSTATICS REQUIRES CUDA)
DEFINE_FEATURE(NAME EK_BOUNDARIES                   IMPLIES ELECTROKINETICS LB_GPU LB_BOUNDARIES_GPU CONSTRAINTS EXTERNAL_FORCES ELECTROSTATICS)
DEFINE_FEATURE(NAME EK_BOUNDARIES                   REQUIRES CUDA)
DEFINE_FEATURE(NAME EK_ELECTROSTATIC_COUPLING       IMPLIES ELECTROKINETICS LB_GPU ELECTROSTATICS REQUIRES CUDA FFTW)
DEFINE_FEATURE(NAME EK_DEBUG                        REQUIRES ELECTROKINETICS)
DEFINE_FEATURE(NAME EK_DOUBLE_PREC                  REQUIRES ELECTROKINETICS)
DEFINE_FEATURE(NAME LATTICE                         EQUALS LB LB_GPU)
DEFINE_FEATURE(NAME SHANCHEN                        IMPLIES LB_GPU CONFLICTS ELECTROKINETICS)


# Interaction features
DEFINE_FEATURE(NAME TABULATED)
DEFINE_FEATURE(NAME LENNARD_JONES)
DEFINE_FEATURE(NAME LJ_WARN_WHEN_CLOSE)
DEFINE_FEATURE(NAME LENNARD_JONES_GENERIC           IMPLIES LENNARD_JONES)
DEFINE_FEATURE(NAME LJCOS)
DEFINE_FEATURE(NAME LJCOS2)
DEFINE_FEATURE(NAME LJ_ANGLE)
DEFINE_FEATURE(NAME LJGEN_SOFTCORE)
DEFINE_FEATURE(NAME COS2)
DEFINE_FEATURE(NAME GAY_BERNE)
DEFINE_FEATURE(NAME SMOOTH_STEP)
DEFINE_FEATURE(NAME HERTZIAN)
DEFINE_FEATURE(NAME GAUSSIAN)
DEFINE_FEATURE(NAME BMHTF_NACL)
DEFINE_FEATURE(NAME MORSE)
DEFINE_FEATURE(NAME BUCKINGHAM)
DEFINE_FEATURE(NAME SOFT_SPHERE)
DEFINE_FEATURE(NAME HAT)
DEFINE_FEATURE(NAME UMBRELLA)
DEFINE_FEATURE(NAME GAY_BERNE                       IMPLIES ROTATION)
DEFINE_FEATURE(NAME OVERLAPPED)

# Fluid-Structure Interactions (object in fluid)
DEFINE_FEATURE(NAME OIF_LOCAL_FORCES)
DEFINE_FEATURE(NAME OIF_GLOBAL_FORCES)
DEFINE_FEATURE(NAME AFFINITY)
DEFINE_FEATURE(NAME MEMBRANE_COLLISION)

DEFINE_FEATURE(NAME BOND_ANGLE                      CONFLICTS BOND_ANGLE_OLD)

DEFINE_FEATURE(NAME BOND_ANGLEDIST)
DEFINE_FEATURE(NAME BOND_ANGLEDIST_HARMONIC         IMPLIES BOND_ANGLEDIST CONSTRAINTS)

DEFINE_FEATURE(NAME BOND_ENDANGLEDIST)
DEFINE_FEATURE(NAME BOND_ENDANGLEDIST_HARMONIC      IMPLIES BOND_ENDANGLEDIST CONSTRAINTS)

DEFINE_FEATURE(NAME CG_DNA                          IMPLIES TWIST_STACK HYDROGEN_BOND COULOMB_DEBYE_HUECKEL)
DEFINE_FEATURE(NAME TWIST_STACK)
DEFINE_FEATURE(NAME HYDROGEN_BOND)
DEFINE_FEATURE(NAME COULOMB_DEBYE_HUECKEL           REQUIRES ELECTROSTATICS)

# Immersed-Boundary Bayreuth version
DEFINE_FEATURE(NAME IMMERSED_BOUNDARY               CONFLICTS VIRTUAL_SITES_RELATIVE VIRTUAL_SITES_COM SHANCHEN ELECTROKINETICS)
DEFINE_FEATURE(NAME SCAFACOS_DIPOLES                REQUIRES SCAFACOS)
DEFINE_FEATURE(NAME SCAFACOS_DIPOLES                IMPLIES DIPOLES)
DEFINE_FEATURE(NAME SCAFACOS                        REQUIRES ELECTROSTATICS)

# Shape of the noise in the (Langevin) thermostat
DEFINE_FEATURE(NAME FLATNOISE                       CONFLICTS GAUSSRANDOM GAUSSRANDOM_CUT)
DEFINE_FEATURE(NAME GAUSSRANDOM                     CONFLICTS FLATNOISE GAUSSRANDOM_CUT)
DEFINE_FEATURE(NAME GAUSSRANDOMCUT                  CONFLICTS GAUSSRANDOM FLATNOISE)


# Strange features. Use only if you know what you are doing!
# activate the old dihedral form
DEFINE_FEATURE(NAME OLD_DIHEDRAL                    notest)
# turn off nonbonded interactions within molecules
DEFINE_FEATURE(NAME NO_INTRA_NB                     notest)
# ghost particles also have the bond information.
DEFINE_FEATURE(NAME GHOSTS_HAVE_BONDS               notest)

# Debugging
DEFINE_FEATURE(NAME ADDITIONAL_CHECKS)

DEFINE_FEATURE(NAME ESIF_DEBUG)
DEFINE_FEATURE(NAME COMM_DEBUG)
DEFINE_FEATURE(NAME EVENT_DEBUG)
DEFINE_FEATURE(NAME INTEG_DEBUG)
DEFINE_FEATURE(NAME CELL_DEBUG)
DEFINE_FEATURE(NAME GHOST_DEBUG)
DEFINE_FEATURE(NAME LATTICE_DEBUG)
DEFINE_FEATURE(NAME HALO_DEBUG)
DEFINE_FEATURE(NAME GRID_DEBUG)
DEFINE_FEATURE(NAME VERLET_DEBUG)
DEFINE_FEATURE(NAME PARTICLE_DEBUG)
DEFINE_FEATURE(NAME P3M_DEBUG)
DEFINE_FEATURE(NAME FFT_DEBUG)
DEFINE_FEATURE(NAME RANDOM_DEBUG)
DEFINE_FEATURE(NAME FORCE_DEBUG)
DEFINE_FEATURE(NAME THERMO_DEBUG)
DEFINE_FEATURE(NAME LE_DEBUG)
DEFINE_FEATURE(NAME LJ_DEBUG)
DEFINE_FEATURE(NAME MORSE_DEBUG)
DEFINE_FEATURE(NAME ESR_DEBUG)
DEFINE_FEATURE(NAME ESK_DEBUG)
DEFINE_FEATURE(NAME FENE_DEBUG)
DEFINE_FEATURE(NAME GHOST_FORCE_DEBUG)
DEFINE_FEATURE(NAME STAT_DEBUG)
DEFINE_FEATURE(NAME POLY_DEBUG)
DEFINE_FEATURE(NAME MOLFORCES_DEBUG)
DEFINE_FEATURE(NAME PTENSOR_DEBUG)
DEFINE_FEATURE(NAME MAGGS_DEBUG)
DEFINE_FEATURE(NAME LB_DEBUG)
DEFINE_FEATURE(NAME VIRTUAL_SITES_DEBUG)
DEFINE_FEATURE(NAME SD_DEBUG)
DEFINE_FEATURE(NAME CUDA_DEBUG)
DEFINE_FEATURE(NAME H5MD_DEBUG)
# Single particle debugging
DEFINE_FEATURE(NAME ONEPART_DEBUG)
# which particle id to debug)
#define ONEPART_DEBUG_ID 13)

# Find the feature file
if(NOT MYCONFIG_FILE)
  if(ENV{ESPRESSO_MYCONFIG})
    set(MYCONFIG_FILE ENV{ESPRESSO_MYCONFIG})
  else()
    find_file(MYCONFIG_FILE 
      NAMES ${MYCONFIG_NAME}
      PATHS ${CMAKE_BINARY_DIR} ${CMAKE_SOURCE_DIR}
      NO_DEFAULT_PATH)
  endif()
endif()

# Read the feature file or use the default config
if(EXISTS "${MYCONFIG_FILE}")
  file(STRINGS ${MYCONFIG_FILE} FEATURE_FLAGS REGEX "^[^#]")
else()
  list(APPEND FEATURE_FLAGS "PARTIAL_PERIODIC")
  list(APPEND FEATURE_FLAGS "ELECTROSTATICS")
  list(APPEND FEATURE_FLAGS "EXTERNAL_FORCES")
  list(APPEND FEATURE_FLAGS "CONSTRAINTS")
  list(APPEND FEATURE_FLAGS "MASS")
  list(APPEND FEATURE_FLAGS "EXCLUSIONS")
  list(APPEND FEATURE_FLAGS "COMFIXED")
  list(APPEND FEATURE_FLAGS "NPT")
  list(APPEND FEATURE_FLAGS "COLLISION_DETECTION")
  list(APPEND FEATURE_FLAGS "LANGEVIN_PER_PARTICLE")
  list(APPEND FEATURE_FLAGS "TABULATED")
  list(APPEND FEATURE_FLAGS "LENNARD_JONES")
  list(APPEND FEATURE_FLAGS "LENNARD_JONES_GENERIC")
  list(APPEND FEATURE_FLAGS "MORSE")
  list(APPEND FEATURE_FLAGS "LJCOS")
  list(APPEND FEATURE_FLAGS "LJCOS2")
  list(APPEND FEATURE_FLAGS "BUCKINGHAM")
  list(APPEND FEATURE_FLAGS "SOFT_SPHERE")
  list(APPEND FEATURE_FLAGS "BOND_ANGLE")
  list(APPEND FEATURE_FLAGS "GAUSSIAN")
  list(APPEND FEATURE_FLAGS "HERTZIAN")
  list(APPEND FEATURE_FLAGS "BOND_VIRTUAL")
  list(APPEND FEATURE_FLAGS "LB")
  list(APPEND FEATURE_FLAGS "LB_BOUNDARIES")
  if(CUDA EQUAL 1)
    list(APPEND FEATURE_FLAGS "EWALD_GPU")
    list(APPEND FEATURE_FLAGS "LB_GPU")
    list(APPEND FEATURE_FLAGS "LB_BOUNDARIES_GPU")
    list(APPEND FEATURE_FLAGS "ELECTROKINETICS")
    list(APPEND FEATURE_FLAGS "EK_BOUNDARIES")
    list(APPEND FEATURE_FLAGS "EK_ELECTROSTATIC_COUPLING")
  endif()
endif()

# Parse features
FEATURES(${FEATURE_FLAGS})
